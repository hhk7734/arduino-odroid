name=ODROID Arduino

# {runtime.platform.path} == ~/Arduino/hardware/hardkernel/odroid
# {runtime.hardware.path} == ~/Arduino/hardware/hardkernel
# {build.path} == /tmp/xxx
# {includes} == -I%HOME/Arduino/hardware/hardkernel/odroid/cores/{build.core} -I%HOME/Arduino/hardware/hardkernel/odroid/variants/{build.variant}
# {runtime.os} == ("linux", "windows", "macosx")


##########################
# ODROID compile variables
##########################

compiler.path=/usr/bin/

build.extra_flags=
compiler.c.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.c.elf.extra_flags=

compiler.S.cmd=
compiler.S.flags=

compiler.c.cmd=gcc
compiler.c.flags= -c -g -lwiringPi -lwiringPiDev -lm -lpthread -lrt -lcrypt

compiler.cpp.cmd=g++
compiler.cpp.flags= -c -g -lwiringPi -lwiringPiDev -lm -lpthread -lrt -lcrypt

compiler.ar.cmd=ar
compiler.ar.flags=rcs

compiler.c.elf.cmd=g++
compiler.c.elf.flags=-g -flto -fuse-linker-plugin -Wl,--gc-sections
compiler.c.elf.libs=-lwiringPi -lwiringPiDev -lm -lpthread -lrt -lcrypt


#########################
# ODROID compile patterns
#########################

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.out" {object_files} "{build.path}/{archive_file}" "-L{build.path}" {compiler.c.elf.libs}

## Preprocessor
recipe.preproc.includes="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.includes.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}"
preproc.includes.flags= -w -x c++ -M -MG -MP

recipe.preproc.macros="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.macros.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{preprocessed_file_path}"
preproc.macros.flags= -w -x c++ -E -CC

##############
# ODROID tools
##############

tools.terminal.path=
tools.terminal.cmd=xterm

tools.terminal.upload.params.verbose=
tools.terminal.upload.params.quiet=
tools.terminal.upload.pattern=

tools.terminal.program.params.verbose=
tools.terminal.program.params.quiet=
tools.terminal.program.pattern=